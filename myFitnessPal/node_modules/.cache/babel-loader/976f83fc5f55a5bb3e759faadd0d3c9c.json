{"ast":null,"code":"class CountryList {\n  constructor() {\n    this.data = require('./data.json');\n    this.labelMap = {};\n    this.valueMap = {};\n    this.data.forEach(country => {\n      this.labelMap[country.label.toLowerCase()] = country.value;\n      this.valueMap[country.value.toLowerCase()] = country.label;\n    });\n  }\n\n  getValue(label) {\n    return this.labelMap[label.toLowerCase()];\n  }\n\n  getLabel(value) {\n    return this.valueMap[value.toLowerCase()];\n  }\n\n  getLabels() {\n    return this.data.map(country => country.label);\n  }\n\n  getValues() {\n    return this.data.map(country => country.value);\n  }\n\n  getLabelList() {\n    return this.labelMap;\n  }\n\n  getValueList() {\n    return this.valueMap;\n  }\n\n  getData() {\n    return this.data;\n  }\n\n  setLabel(value, label) {\n    this.data.forEach(country => {\n      if (country.value === value) {\n        country.label = label;\n        this.valueMap[country.value.toLowerCase()] = country.label;\n      }\n    });\n    return this;\n  }\n\n  setEmpty(label) {\n    this.data.unshift({\n      value: '',\n      label: label\n    });\n    this.valueMap[''] = label;\n    this.labelMap[label] = '';\n    return this;\n  }\n\n  native() {\n    this.nativeData = require('./data-native.json');\n    this.nativeData.forEach(country => {\n      this.labelMap[country.label.toLowerCase()] = country.value;\n      this.valueMap[country.value.toLowerCase()] = country.label;\n    });\n    return this;\n  }\n\n}\n\nconst countryList = () => {\n  if (!(this instanceof CountryList)) return new CountryList();\n};\n\nmodule.exports = countryList;","map":{"version":3,"sources":["C:/Users/jatin/OneDrive/Desktop/rr/my-app/node_modules/react-select-country-list/country-list.js"],"names":["CountryList","constructor","data","require","labelMap","valueMap","forEach","country","label","toLowerCase","value","getValue","getLabel","getLabels","map","getValues","getLabelList","getValueList","getData","setLabel","setEmpty","unshift","native","nativeData","countryList","module","exports"],"mappings":"AAAA,MAAMA,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAYC,OAAO,CAAC,aAAD,CAAnB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AAEA,SAAKH,IAAL,CAAUI,OAAV,CAAkBC,OAAO,IAAI;AAC3B,WAAKH,QAAL,CAAcG,OAAO,CAACC,KAAR,CAAcC,WAAd,EAAd,IAA6CF,OAAO,CAACG,KAArD;AACA,WAAKL,QAAL,CAAcE,OAAO,CAACG,KAAR,CAAcD,WAAd,EAAd,IAA6CF,OAAO,CAACC,KAArD;AACD,KAHD;AAID;;AAEDG,EAAAA,QAAQ,CAACH,KAAD,EAAQ;AACd,WAAO,KAAKJ,QAAL,CAAcI,KAAK,CAACC,WAAN,EAAd,CAAP;AACD;;AAEDG,EAAAA,QAAQ,CAACF,KAAD,EAAQ;AACd,WAAO,KAAKL,QAAL,CAAcK,KAAK,CAACD,WAAN,EAAd,CAAP;AACD;;AAEDI,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKX,IAAL,CAAUY,GAAV,CAAcP,OAAO,IAAIA,OAAO,CAACC,KAAjC,CAAP;AACD;;AAEDO,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKb,IAAL,CAAUY,GAAV,CAAcP,OAAO,IAAIA,OAAO,CAACG,KAAjC,CAAP;AACD;;AAEDM,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKZ,QAAZ;AACD;;AAEDa,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKZ,QAAZ;AACD;;AAEDa,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKhB,IAAZ;AACD;;AAEDiB,EAAAA,QAAQ,CAACT,KAAD,EAAQF,KAAR,EAAe;AACrB,SAAKN,IAAL,CAAUI,OAAV,CAAkBC,OAAO,IAAI;AAC3B,UAAIA,OAAO,CAACG,KAAR,KAAkBA,KAAtB,EAA6B;AAC3BH,QAAAA,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AACA,aAAKH,QAAL,CAAcE,OAAO,CAACG,KAAR,CAAcD,WAAd,EAAd,IAA6CF,OAAO,CAACC,KAArD;AACD;AACF,KALD;AAOA,WAAO,IAAP;AACD;;AAEDY,EAAAA,QAAQ,CAACZ,KAAD,EAAQ;AACd,SAAKN,IAAL,CAAUmB,OAAV,CAAkB;AAChBX,MAAAA,KAAK,EAAE,EADS;AAEhBF,MAAAA,KAAK,EAAEA;AAFS,KAAlB;AAIA,SAAKH,QAAL,CAAc,EAAd,IAAoBG,KAApB;AACA,SAAKJ,QAAL,CAAcI,KAAd,IAAuB,EAAvB;AAEA,WAAO,IAAP;AACD;;AAEDc,EAAAA,MAAM,GAAG;AACP,SAAKC,UAAL,GAAkBpB,OAAO,CAAC,oBAAD,CAAzB;AACA,SAAKoB,UAAL,CAAgBjB,OAAhB,CAAwBC,OAAO,IAAI;AACjC,WAAKH,QAAL,CAAcG,OAAO,CAACC,KAAR,CAAcC,WAAd,EAAd,IAA6CF,OAAO,CAACG,KAArD;AACA,WAAKL,QAAL,CAAcE,OAAO,CAACG,KAAR,CAAcD,WAAd,EAAd,IAA6CF,OAAO,CAACC,KAArD;AACD,KAHD;AAKA,WAAO,IAAP;AACD;;AAtEe;;AAyElB,MAAMgB,WAAW,GAAG,MAAM;AACxB,MAAI,EAAE,gBAAgBxB,WAAlB,CAAJ,EAAoC,OAAO,IAAIA,WAAJ,EAAP;AACrC,CAFD;;AAIAyB,MAAM,CAACC,OAAP,GAAiBF,WAAjB","sourcesContent":["class CountryList {\n  constructor() {\n    this.data = require('./data.json')\n    this.labelMap = {}\n    this.valueMap = {}\n\n    this.data.forEach(country => {\n      this.labelMap[country.label.toLowerCase()] = country.value\n      this.valueMap[country.value.toLowerCase()] = country.label\n    })\n  }\n\n  getValue(label) {\n    return this.labelMap[label.toLowerCase()]\n  }\n\n  getLabel(value) {\n    return this.valueMap[value.toLowerCase()]\n  }\n\n  getLabels() {\n    return this.data.map(country => country.label)\n  }\n\n  getValues() {\n    return this.data.map(country => country.value)\n  }\n\n  getLabelList() {\n    return this.labelMap\n  }\n\n  getValueList() {\n    return this.valueMap\n  }\n\n  getData() {\n    return this.data\n  }\n\n  setLabel(value, label) {\n    this.data.forEach(country => {\n      if (country.value === value) {\n        country.label = label\n        this.valueMap[country.value.toLowerCase()] = country.label\n      }\n    })\n\n    return this\n  }\n\n  setEmpty(label) {\n    this.data.unshift({\n      value: '',\n      label: label,\n    })\n    this.valueMap[''] = label\n    this.labelMap[label] = ''\n\n    return this\n  }\n\n  native() {\n    this.nativeData = require('./data-native.json')\n    this.nativeData.forEach(country => {\n      this.labelMap[country.label.toLowerCase()] = country.value\n      this.valueMap[country.value.toLowerCase()] = country.label\n    })\n\n    return this\n  }\n}\n\nconst countryList = () => {\n  if (!(this instanceof CountryList)) return new CountryList()\n}\n\nmodule.exports = countryList\n"]},"metadata":{},"sourceType":"script"}